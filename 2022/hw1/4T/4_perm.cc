/*

================================= Перестановки =================================

Как известно, из множества из N различных предметов можно сделать N! различных
перестановок.

Если предметы можно сравнивать между собой, то перестановки можно перенумеровать
в лексикографическом порядке. Например, перестановки множества {1,2,3} будут
идти в следующем порядке: {1,2,3}, {1,3,2}, {2,1,3}, {2,3,1}, {3,1,2}, {3,2,1}.

Таким образом, все перестановки множества различных элементов можно
пронумеровать от 1 до N!.

В нашей задаче мы будем переставлять элементы из множества натуральных чисел от
1 до N.

================================= Input format =================================

На вход программы подаётся два числа — количество предметов в перестановке
2⩽N⩽20 и номер перестановки 1⩽M⩽2×1018.

================================= Output format ================================

Вывести через пробел элементы перестановки, имеющей номер M.

=================================== Examples ===================================

--------- Input ---------

5
120

--------- Output --------

5 4 3 2 1

--------- Input ---------

10
73238

--------- Output --------

1 3 9 6 8 4 7 2 10 5

*/

#include <array>
#include <cstdint>
#include <iostream>
#include <iterator>
#include <list>

constexpr std::array<uint64_t, 21> FACT{
    1,                        // 0!
    1,                        // 1!
    2,                        // 2!
    6,                        // 3!
    24,                       // 4!
    120,                      // 5!
    720,                      // 6!
    5040,                     // 7!
    40320,                    // 8!
    362'880,                  // 9!
    3'628'800,                // 10!
    39'916'800,               // 11!
    479'001'600,              // 12!
    6'227'020'800,            // 13!
    87'178'291'200,           // 14!
    1'307'674'368'000,        // 15!
    20'922'789'888'000,       // 16!
    355'687'428'096'000,      // 17!
    6'402'373'705'728'000,    // 18!
    121'645'100'408'832'000,  // 19!
    2'432'902'008'176'640'000 // 20!
};

int main()
{
  uint64_t elemNum = 0;
  std::cin >> elemNum;

  uint64_t position = 0;
  std::cin >> position;
  --position;

  std::list<uint64_t> elements{};
  for (uint64_t i = 1; i <= elemNum; ++i)
    elements.push_back(i);

  for (; elemNum != 0; --elemNum)
  {
    auto prevFact = FACT[elemNum - 1];

    auto pos = position / prevFact;
    position %= prevFact;

    auto it = elements.begin();
    std::advance(it, pos);
    std::cout << *it << " ";

    elements.erase(it);
  }

  return 0;
}
